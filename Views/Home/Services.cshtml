@inject ASP121.Services.Hash.IHashService hashService
@{
    ViewData["Title"] = "SignUp";
}

<div>
    <h1 class="display-4">Служби залежностей</h1>
</div>

<p>
    Служби - "постачальники" об'єктів, які керють їх життєвим циклом.
    Служби приходять на заміну інструкціям на кшалт
    <code>var instance = new FunctionalClass()</code>,
    які кожного разу утворюють нові об'єкти.
    Якщо у різних частинах проєкту потрібні однакові об'єкти і немає
    необхідності кожного разу створювати новий, то служби - це рішення.
</p>
<p>
    Створення служб складається з кількох етапів:
</p>
<ol>
    <li>Оголошуємо необхідні класи</li>
    <li>Реєструємо службу у Program.cs (<code>builder.Services.Add...</code>)</li>
    <li>Інжектуємо службу у потрібне місце.</li>
</ol>
<p>
    У вимогах SOLID<b>D</b>наявний принцип DIP - Dependency Inversion Principle,
    згідно з яким залежності не бажано утворювати від класів (реалізації),
    а краще посилатись на інтерфейси (абстракції). Зокрема, це дозволяє у простий
    спосіб змінювати 
</p>
<p>
    

</p>
<p>
    Впровадження (інжекція) служби - у контролері<br />
    <code>private readonly IHashService _hashService;</code><br />
    Та додаємо параметр у конструктор, це можна зробити через помічника
    (оперативне меню). Далі використовуємо:
    <code>_hashService.HashString("123")</code> = @ViewData["hash"]
    <br />
   <code>&commat;inject ASP121.Services.Hash.IHashService hashService</code>
</p>
<p>
    Вносимо зміни - утворюємо ще один клас Sha1HashService та змінюємо
    у Program.cs реєстрацію служби builder.Services.AddSingleton<IHashService, Md5HashService>();
    Інших змін у код вносити не треба, всі точки інжекції автоматично перейдуть
    на роботу з 
</p>
<p>
    Scope - область існування об'єктів (служб). Це область життєвого циклу
    програми, у якій об'єкт існує без змін, при виході з цієї області
    буде створюватись новий об'єкт. Можна порівняти з локальністю (областю
    видності) змінних, але scope служб має особливості.
</p>
<p>
    <b>Singleton</b> - постійне існування протягом усього "життя" програми.
    Для контроля за створенням нових об'єктів можна досліджувати їч внутрішні 
    геш-образи(HashCode): код у контроллері -  @ViewData["obj"]
    код у представленні - @hashService.GetHashCode()
</p>
<p>
    <b>Scoped</b> - існування протягом оброблення одного запиту (RequestScoped).
    код у контроллері -  @ViewData["obj"]
    код у представленні - @hashService.GetHashCode()
</p>
<p>
    <b>Transient</b> - утворення нових об'єктів для кожної з точок інжекції.
    код у контроллері -  @ViewData["obj"]
    код у представленні - @hashService.GetHashCode()
</p>
<p>
    HashCode Controller @ViewData["ctr"]
</p>